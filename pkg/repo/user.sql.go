// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package repo

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users (id, email, phone_number, hashed_password, first_name, last_name, gender, birth_day)
values ($1, $2, $3, $4, $5, $6, $7, $8)
returning id, email, phone_number, hashed_password, first_name, last_name, gender, birth_day, updated_at, created_at
`

type CreateUserParams struct {
	ID             uuid.UUID      `json:"id"`
	Email          string         `json:"email"`
	PhoneNumber    sql.NullString `json:"phoneNumber"`
	HashedPassword string         `json:"hashedPassword"`
	FirstName      string         `json:"firstName"`
	LastName       string         `json:"lastName"`
	Gender         int16          `json:"gender"`
	BirthDay       sql.NullTime   `json:"birthDay"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PhoneNumber,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.BirthDay,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.BirthDay,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
with deleted as
         (
             delete from users
                 where id = $1
                 returning id, email, phone_number, hashed_password, first_name, last_name, gender, birth_day, updated_at, created_at
         )
select count(*)
from deleted
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
select id, email, phone_number, hashed_password, first_name, last_name, gender, birth_day, updated_at, created_at
from users
where id = $1
limit 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.BirthDay,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
set email           = case when coalesce($1::varchar(64), '') = '' then email else $1 end,
    phone_number    = case when coalesce($2::varchar(32), '') = '' then phone_number else $2 end,
    hashed_password = case
                          when coalesce($3::varchar, '') = '' then hashed_password
                          else $3 end,
    first_name      = case when coalesce($4::varchar(64), '') = '' then first_name else $4 end,
    last_name       = case when coalesce($5::varchar(64), '') = '' then last_name else $5 end,
    gender          = case when coalesce($6::smallint, 0) = 0 then gender else $6 end,
    birth_day       = case when $7::date = '0001-01-01' then birth_day else $7 end
where id = $8
returning id, email, phone_number, hashed_password, first_name, last_name, gender, birth_day, updated_at, created_at
`

type UpdateUserParams struct {
	Email          string    `json:"email"`
	PhoneNumber    string    `json:"phoneNumber"`
	HashedPassword string    `json:"hashedPassword"`
	FirstName      string    `json:"firstName"`
	LastName       string    `json:"lastName"`
	Gender         int16     `json:"gender"`
	BirthDay       time.Time `json:"birthDay"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.PhoneNumber,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.BirthDay,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.BirthDay,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
