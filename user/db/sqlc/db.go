// Code generated by sqlc. DO NOT EDIT.

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getHashedPasswordStmt, err = db.PrepareContext(ctx, getHashedPassword); err != nil {
		return nil, fmt.Errorf("error preparing query GetHashedPassword: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserInfoStmt, err = db.PrepareContext(ctx, updateUserInfo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserInfo: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserPhoneNumberStmt, err = db.PrepareContext(ctx, updateUserPhoneNumber); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPhoneNumber: %w", err)
	}
	if q.updateUserUsernameStmt, err = db.PrepareContext(ctx, updateUserUsername); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserUsername: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getHashedPasswordStmt != nil {
		if cerr := q.getHashedPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHashedPasswordStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserInfoStmt != nil {
		if cerr := q.updateUserInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserInfoStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserPhoneNumberStmt != nil {
		if cerr := q.updateUserPhoneNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPhoneNumberStmt: %w", cerr)
		}
	}
	if q.updateUserUsernameStmt != nil {
		if cerr := q.updateUserUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserUsernameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createUserStmt            *sql.Stmt
	getHashedPasswordStmt     *sql.Stmt
	getUserByEmailStmt        *sql.Stmt
	getUserByIDStmt           *sql.Stmt
	getUserByUsernameStmt     *sql.Stmt
	updateUserEmailStmt       *sql.Stmt
	updateUserInfoStmt        *sql.Stmt
	updateUserPasswordStmt    *sql.Stmt
	updateUserPhoneNumberStmt *sql.Stmt
	updateUserUsernameStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createUserStmt:            q.createUserStmt,
		getHashedPasswordStmt:     q.getHashedPasswordStmt,
		getUserByEmailStmt:        q.getUserByEmailStmt,
		getUserByIDStmt:           q.getUserByIDStmt,
		getUserByUsernameStmt:     q.getUserByUsernameStmt,
		updateUserEmailStmt:       q.updateUserEmailStmt,
		updateUserInfoStmt:        q.updateUserInfoStmt,
		updateUserPasswordStmt:    q.updateUserPasswordStmt,
		updateUserPhoneNumberStmt: q.updateUserPhoneNumberStmt,
		updateUserUsernameStmt:    q.updateUserUsernameStmt,
	}
}
