// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	grpc "github.com/go-kit/kit/transport/grpc"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
	endpoint "user/pkg/endpoint"
	http1 "user/pkg/http"
	service "user/pkg/service"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	initGRPCHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"AddGender":           {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddGender", logger))},
		"CreateUser":          {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "CreateUser", logger))},
		"DeleteUserPermanent": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteUserPermanent", logger))},
		"DeleteUserSoft":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteUserSoft", logger))},
		"GetGender":           {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetGender", logger))},
		"GetUserByEmail":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetUserByEmail", logger))},
		"GetUserByID":         {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetUserByID", logger))},
		"ListGenders":         {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ListGenders", logger))},
		"RecoverUser":         {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "RecoverUser", logger))},
		"RemoveGender":        {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "RemoveGender", logger))},
		"UpdateUserEmail":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateUserEmail", logger))},
		"UpdateUserInfo":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateUserInfo", logger))},
		"UpdateUserPassword":  {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateUserPassword", logger))},
		"VerifyPassword":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "VerifyPassword", logger))},
	}
	return options
}
func defaultGRPCOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]grpc.ServerOption {
	options := map[string][]grpc.ServerOption{
		"AddGender":           {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "AddGender", logger))},
		"CreateUser":          {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "CreateUser", logger))},
		"DeleteUserPermanent": {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "DeleteUserPermanent", logger))},
		"DeleteUserSoft":      {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "DeleteUserSoft", logger))},
		"GetGender":           {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "GetGender", logger))},
		"GetUserByEmail":      {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "GetUserByEmail", logger))},
		"GetUserByID":         {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "GetUserByID", logger))},
		"ListGenders":         {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "ListGenders", logger))},
		"RecoverUser":         {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "RecoverUser", logger))},
		"RemoveGender":        {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "RemoveGender", logger))},
		"UpdateUserEmail":     {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "UpdateUserEmail", logger))},
		"UpdateUserInfo":      {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "UpdateUserInfo", logger))},
		"UpdateUserPassword":  {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "UpdateUserPassword", logger))},
		"VerifyPassword":      {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "VerifyPassword", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["AddGender"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AddGender")), endpoint.InstrumentingMiddleware(duration.With("method", "AddGender"))}
	mw["GetGender"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetGender")), endpoint.InstrumentingMiddleware(duration.With("method", "GetGender"))}
	mw["ListGenders"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "ListGenders")), endpoint.InstrumentingMiddleware(duration.With("method", "ListGenders"))}
	mw["RemoveGender"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "RemoveGender")), endpoint.InstrumentingMiddleware(duration.With("method", "RemoveGender"))}
	mw["CreateUser"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "CreateUser")), endpoint.InstrumentingMiddleware(duration.With("method", "CreateUser"))}
	mw["GetUserByID"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetUserByID")), endpoint.InstrumentingMiddleware(duration.With("method", "GetUserByID"))}
	mw["GetUserByEmail"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetUserByEmail")), endpoint.InstrumentingMiddleware(duration.With("method", "GetUserByEmail"))}
	mw["UpdateUserEmail"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateUserEmail")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateUserEmail"))}
	mw["UpdateUserPassword"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateUserPassword")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateUserPassword"))}
	mw["UpdateUserInfo"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateUserInfo")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateUserInfo"))}
	mw["DeleteUserSoft"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteUserSoft")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteUserSoft"))}
	mw["RecoverUser"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "RecoverUser")), endpoint.InstrumentingMiddleware(duration.With("method", "RecoverUser"))}
	mw["DeleteUserPermanent"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteUserPermanent")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteUserPermanent"))}
	mw["VerifyPassword"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "VerifyPassword")), endpoint.InstrumentingMiddleware(duration.With("method", "VerifyPassword"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"AddGender", "GetGender", "ListGenders", "RemoveGender", "CreateUser", "GetUserByID", "GetUserByEmail", "UpdateUserEmail", "UpdateUserPassword", "UpdateUserInfo", "DeleteUserSoft", "RecoverUser", "DeleteUserPermanent", "VerifyPassword"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
