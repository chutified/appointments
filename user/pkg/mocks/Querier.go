// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"
	repo "user/pkg/repo"

	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CreateGender provides a mock function with given fields: ctx, title
func (_m *Querier) CreateGender(ctx context.Context, title string) (repo.Gender, error) {
	ret := _m.Called(ctx, title)

	var r0 repo.Gender
	if rf, ok := ret.Get(0).(func(context.Context, string) repo.Gender); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(repo.Gender)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGender provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteGender(ctx context.Context, id int16) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int16) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGender provides a mock function with given fields: ctx, id
func (_m *Querier) GetGender(ctx context.Context, id int16) (repo.Gender, error) {
	ret := _m.Called(ctx, id)

	var r0 repo.Gender
	if rf, ok := ret.Get(0).(func(context.Context, int16) repo.Gender); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repo.Gender)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int16) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGenders provides a mock function with given fields: ctx
func (_m *Querier) ListGenders(ctx context.Context) ([]repo.Gender, error) {
	ret := _m.Called(ctx)

	var r0 []repo.Gender
	if rf, ok := ret.Get(0).(func(context.Context) []repo.Gender); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Gender)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// createuser provides a mock function with given fields: ctx, arg
func (_m *Querier) createuser(ctx context.Context, arg repo.createuserParams) (repo.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 repo.User
	if rf, ok := ret.Get(0).(func(context.Context, repo.createuserParams) repo.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.createuserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// deleteuserpermanent provides a mock function with given fields: ctx, id
func (_m *Querier) deleteuserpermanent(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// deleteusersoft provides a mock function with given fields: ctx, id
func (_m *Querier) deleteusersoft(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// gethashedpassword provides a mock function with given fields: ctx, id
func (_m *Querier) gethashedpassword(ctx context.Context, id int64) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getuserbyemail provides a mock function with given fields: ctx, email
func (_m *Querier) getuserbyemail(ctx context.Context, email string) (repo.User, error) {
	ret := _m.Called(ctx, email)

	var r0 repo.User
	if rf, ok := ret.Get(0).(func(context.Context, string) repo.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getuserbyid provides a mock function with given fields: ctx, id
func (_m *Querier) getuserbyid(ctx context.Context, id int64) (repo.User, error) {
	ret := _m.Called(ctx, id)

	var r0 repo.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) repo.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// recoverdeleteduser provides a mock function with given fields: ctx, id
func (_m *Querier) recoverdeleteduser(ctx context.Context, id int64) (repo.User, error) {
	ret := _m.Called(ctx, id)

	var r0 repo.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) repo.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// updateuseremail provides a mock function with given fields: ctx, arg
func (_m *Querier) updateuseremail(ctx context.Context, arg repo.updateuseremailParams) (repo.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 repo.User
	if rf, ok := ret.Get(0).(func(context.Context, repo.updateuseremailParams) repo.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.updateuseremailParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// updateuserinfo provides a mock function with given fields: ctx, arg
func (_m *Querier) updateuserinfo(ctx context.Context, arg repo.updateuserinfoParams) (repo.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 repo.User
	if rf, ok := ret.Get(0).(func(context.Context, repo.updateuserinfoParams) repo.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.updateuserinfoParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// updateuserpassword provides a mock function with given fields: ctx, arg
func (_m *Querier) updateuserpassword(ctx context.Context, arg repo.updateuserpasswordParams) (repo.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 repo.User
	if rf, ok := ret.Get(0).(func(context.Context, repo.updateuserpasswordParams) repo.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.updateuserpasswordParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
