// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package repo

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
insert into users (email, hashed_password, first_name, last_name, birth_day, gender, phone_number)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

type CreateUserParams struct {
	Email          string         `json:"email"`
	HashedPassword string         `json:"hashedPassword"`
	FirstName      string         `json:"firstName"`
	LastName       string         `json:"lastName"`
	BirthDay       sql.NullTime   `json:"birthDay"`
	Gender         int16          `json:"gender"`
	PhoneNumber    sql.NullString `json:"phoneNumber"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.BirthDay,
		arg.Gender,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserPermanent = `-- name: DeleteUserPermanent :exec
delete
from users
where id = $1
  and deleted_at is null
`

func (q *Queries) DeleteUserPermanent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPermanent, id)
	return err
}

const deleteUserSoft = `-- name: DeleteUserSoft :exec
update users
set deleted_at = now()
where id = $1
  and deleted_at is null
`

func (q *Queries) DeleteUserSoft(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserSoft, id)
	return err
}

const getHashedPassword = `-- name: GetHashedPassword :one
select hashed_password
from users
where id = $1
  and deleted_at is null
limit 1
`

func (q *Queries) GetHashedPassword(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getHashedPassword, id)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
from users
where email = $1
  and deleted_at is null
limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
from users
where id = $1
  and deleted_at is null
limit 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const recoverUser = `-- name: RecoverUser :one
update users
set deleted_at = null
where id = $1
  and deleted_at is not null
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

func (q *Queries) RecoverUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, recoverUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
update users
set email = $1
where id = $2
  and deleted_at is null
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

type UpdateUserEmailParams struct {
	Email string `json:"email"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserInfo = `-- name: UpdateUserInfo :one
update users
set first_name   = case
                       when coalesce($1, '') = '' then first_name
                       else $1
    end,
    last_name    = case
                       when coalesce($2, '') = '' then last_name
                       else $2
        end,
    birth_day    = coalesce($3, birth_day),
    gender       = case
                       when coalesce($4, 0) = 0 then gender
                       else $4
        end,
    phone_number = coalesce($5, phone_number)
where id = $6
  and deleted_at is null
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

type UpdateUserInfoParams struct {
	FirstName   interface{}    `json:"firstName"`
	LastName    interface{}    `json:"lastName"`
	BirthDay    sql.NullTime   `json:"birthDay"`
	Gender      interface{}    `json:"gender"`
	PhoneNumber sql.NullString `json:"phoneNumber"`
	ID          int64          `json:"id"`
}

// set first_name   = $2,
//     last_name    = $3,
//     birth_day    = $4,
//     gender       = $5,
//     phone_number = $6
func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserInfo,
		arg.FirstName,
		arg.LastName,
		arg.BirthDay,
		arg.Gender,
		arg.PhoneNumber,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
update users
set hashed_password = $1
where id = $2
  and deleted_at is null
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

type UpdateUserPasswordParams struct {
	HashedPassword string `json:"hashedPassword"`
	ID             int64  `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.HashedPassword, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}
