// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package repo

import (
	"context"
	"database/sql"
)

const createuser = `-- name: createuser :one
insert into users (email, hashed_password, first_name, last_name, birth_day, gender, phone_number)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

type createuserParams struct {
	Email          string         `json:"email"`
	HashedPassword string         `json:"hashed_password"`
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	BirthDay       sql.NullTime   `json:"birth_day"`
	Gender         int16          `json:"gender"`
	PhoneNumber    sql.NullString `json:"phone_number"`
}

func (q *Queries) createuser(ctx context.Context, arg createuserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createuser,
		arg.Email,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.BirthDay,
		arg.Gender,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteuserpermanent = `-- name: deleteuserpermanent :exec
delete
from users
where id = $1
  and deleted_at is null
`

func (q *Queries) deleteuserpermanent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteuserpermanent, id)
	return err
}

const deleteusersoft = `-- name: deleteusersoft :exec
update users
set deleted_at = now()
where id = $1
  and deleted_at is null
`

func (q *Queries) deleteusersoft(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteusersoft, id)
	return err
}

const gethashedpassword = `-- name: gethashedpassword :one
select hashed_password
from users
where id = $1
  and deleted_at is null
limit 1
`

func (q *Queries) gethashedpassword(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, gethashedpassword, id)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const getuserbyemail = `-- name: getuserbyemail :one
select id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
from users
where email = $1
  and deleted_at is null
limit 1
`

func (q *Queries) getuserbyemail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getuserbyemail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getuserbyid = `-- name: getuserbyid :one
select id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
from users
where id = $1
  and deleted_at is null
limit 1
`

func (q *Queries) getuserbyid(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getuserbyid, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const recoverdeleteduser = `-- name: recoverdeleteduser :one
update users
set deleted_at = null
where id = $1
  and deleted_at is not null
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

func (q *Queries) recoverdeleteduser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, recoverdeleteduser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateuseremail = `-- name: updateuseremail :one
update users
set email = $2
where id = $1
  and deleted_at is null
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

type updateuseremailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) updateuseremail(ctx context.Context, arg updateuseremailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateuseremail, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateuserinfo = `-- name: updateuserinfo :one
update users
set first_name   = $2,
    last_name    = $3,
    birth_day    = $4,
    gender       = $5,
    phone_number = $6
where id = $1
  and deleted_at is null
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

type updateuserinfoParams struct {
	ID          int64          `json:"id"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	BirthDay    sql.NullTime   `json:"birth_day"`
	Gender      int16          `json:"gender"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) updateuserinfo(ctx context.Context, arg updateuserinfoParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateuserinfo,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.BirthDay,
		arg.Gender,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateuserpassword = `-- name: updateuserpassword :one
update users
set hashed_password = $2
where id = $1
  and deleted_at is null
returning id, email, hashed_password, first_name, last_name, birth_day, gender, phone_number, updated_at, deleted_at, created_at
`

type updateuserpasswordParams struct {
	ID             int64  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) updateuserpassword(ctx context.Context, arg updateuserpasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateuserpassword, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.BirthDay,
		&i.Gender,
		&i.PhoneNumber,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedAt,
	)
	return i, err
}
